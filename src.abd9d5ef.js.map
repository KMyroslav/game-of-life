{"version":3,"sources":["index.js"],"names":["continious","start","button","document","querySelector","buttonRst","width","clientWidth","height","clientHeight","canvas","getContext","size","Math","round","cols","rows","countNeighbours","i","j","arr","neighbours","setAttribute","make2Darray","Array","z","random","push","fillStyle","floor","fillRect","clearRect","gameOflife","arrCopy","onBtnClick","setInterval","textContent","clearInterval","onRstBtnClick","addEventListener"],"mappings":";AAMA,IACIA,EADAC,EAAQ,EAEZ,MAAMC,EAASC,SAASC,cAAc,QAChCC,EAAYF,SAASC,cAAc,cACnCE,EACJH,SAASC,cAAc,WAAWG,YACjCJ,SAASC,cAAc,WAAWG,YAAc,EAC7CC,EACJL,SAASC,cAAc,WAAWK,aACjCN,SAASC,cAAc,WAAWK,aAAe,EAC9CC,EAASP,SAASC,cAAc,WAAWO,WAAW,MACtDC,EAAOC,KAAKC,MAAOR,EAAQE,GAAYF,EAAQE,EAAU,IACzDO,EAAOF,KAAKC,MAAMR,EAAQM,GAC1BI,EAAOH,KAAKC,MAAMN,EAASI,GAKjC,SAASK,EAAgBC,EAAGC,EAAGC,GAYzBC,IAAAA,EAAa,EACbF,OACFE,GADQ,IAANF,GAAiB,IAAND,EACCE,EAAIF,GAAGC,EAAI,GAAG,GAAKC,EAAIF,EAAI,GAAGC,GAAG,GAAKC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAGpEA,IAAMH,EAAO,GAAW,IAANE,EACNE,EAAIF,EAAI,GAAGC,GAAG,GAAKC,EAAIF,GAAGC,EAAI,GAAG,GAAKC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAG9D,IAANA,GAAWD,IAAMH,EAAO,EACZK,EAAIF,GAAGC,EAAI,GAAG,GAAKC,EAAIF,EAAI,GAAGC,GAAG,GAAKC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAGpEA,IAAMH,EAAO,GAAKE,IAAMH,EAAO,EACnBK,EAAIF,GAAGC,EAAI,GAAG,GAAKC,EAAIF,EAAI,GAAGC,GAAG,GAAKC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAI9D,IAAND,GAAiB,IAANC,GAAWA,IAAMH,EAAO,EAEnCI,EAAIF,GAAGC,EAAI,GAAG,GACdC,EAAIF,GAAGC,EAAI,GAAG,GACdC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAClBC,EAAIF,EAAI,GAAGC,GAAG,GACdC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAGZ,IAANA,GAAiB,IAAND,GAAWA,IAAMH,EAAO,EAEnCK,EAAIF,EAAI,GAAGC,GAAG,GACdC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAClBC,EAAIF,GAAGC,EAAI,GAAG,GACdC,EAAIF,EAAI,GAAGC,GAAG,GACdC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAGlBD,IAAMH,EAAO,GAAW,IAANI,GAAWA,IAAMH,EAAO,EAE1CI,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAClBC,EAAIF,EAAI,GAAGC,GAAG,GACdC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAClBC,EAAIF,GAAGC,EAAI,GAAG,GACdC,EAAIF,GAAGC,EAAI,GAAG,GAGdA,IAAMH,EAAO,GAAW,IAANE,GAAWA,IAAMH,EAAO,EAE1CK,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAClBC,EAAIF,EAAI,GAAGC,GAAG,GACdC,EAAIF,GAAGC,EAAI,GAAG,GACdC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAClBC,EAAIF,EAAI,GAAGC,GAAG,GAIdC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAClBC,EAAIF,EAAI,GAAGC,GAAG,GACdC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAClBC,EAAIF,GAAGC,EAAI,GAAG,GACdC,EAAIF,GAAGC,EAAI,GAAG,GACdC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GAClBC,EAAIF,EAAI,GAAGC,GAAG,GACdC,EAAIF,EAAI,GAAGC,EAAI,GAAG,GA7ExBhB,SAASC,cAAc,WAAWkB,aAAa,WAAYhB,KAC3DH,SAASC,cAAc,WAAWkB,aAAa,YAAad,KAiF5D,MAAMe,EAAc,WACZH,MAAAA,EAAM,IAAII,MAAMT,GACjB,IAAA,IAAIG,EAAI,EAAGA,EAAIH,EAAMG,GAAK,EAC7BE,EAAIF,GAAK,IAAIM,MAAMR,GAEhB,IAAA,IAAIE,EAAI,EAAGA,EAAIH,EAAMG,GAAK,EACxB,IAAA,IAAIC,EAAI,EAAGA,EAAIH,EAAMG,GAAK,EAAG,CAC5BM,IAAAA,EAEFA,EADEN,EAAI,GAAM,EACRN,KAAKC,MAAMD,KAAKa,SAAW,MAE3Bb,KAAKC,MAAMD,KAAKa,SAAW,KAEjCN,EAAIF,GAAGC,GAAK,CAACD,EAAGC,EAAGM,GAGlB,IAAA,IAAIP,EAAI,EAAGA,EAAIH,EAAMG,GAAK,EACxB,IAAA,IAAIC,EAAI,EAAGA,EAAIH,EAAMG,GAAK,EAC7BC,EAAIF,GAAGC,GAAGQ,KAAKV,EAAgBC,EAAGC,EAAGC,IAChB,IAAjBA,EAAIF,GAAGC,GAAG,KACZT,EAAOkB,+DAGDf,KAAKgB,MAAsB,IAAhBhB,KAAKa,aACtBhB,EAAOoB,SAASZ,EAAIN,EAAMO,EAAIP,EAAMA,EAAMA,IAEvB,IAAjBQ,EAAIF,GAAGC,GAAG,IACZT,EAAOqB,UAAUb,EAAIN,EAAMO,EAAIP,EAAMA,EAAMA,GAI1CQ,OAAAA,GAGT,IAAIA,EAAMG,IAEV,SAASS,IACDC,MAAAA,EAAU,IAAIb,GACf,IAAA,IAAIF,EAAI,EAAGA,EAAIH,EAAMG,GAAK,EACxB,IAAA,IAAIC,EAAI,EAAGA,EAAIH,EAAMG,GAAK,EAAG,CAC5BE,IAAAA,EAAaJ,EAAgBC,EAAGC,EAAGc,GACnCZ,EAAa,EACfD,EAAIF,GAAGC,GAAG,GAAK,EACNE,EAAa,EACtBD,EAAIF,GAAGC,GAAG,GAAK,EACY,IAAjBC,EAAIF,GAAGC,GAAG,IAA2B,IAAfE,GAAoC,IAAfA,EACrDD,EAAIF,GAAGC,GAAG,GAAK,EACW,IAAjBC,EAAIF,GAAGC,GAAG,IAA2B,IAAfE,IAC/BD,EAAIF,GAAGC,GAAG,GAAK,GAGI,IAAjBC,EAAIF,GAAGC,GAAG,KACZT,EAAOkB,+DAGDf,KAAKgB,MAAsB,IAAhBhB,KAAKa,aACtBhB,EAAOoB,SAASZ,EAAIN,EAAMO,EAAIP,EAAMA,EAAMA,IAEvB,IAAjBQ,EAAIF,GAAGC,GAAG,IACZT,EAAOqB,UAAUb,EAAIN,EAAMO,EAAIP,EAAMA,EAAMA,IAQnD,SAASsB,KACPjC,EAAkB,IAAVA,EAAc,EAAI,IAExBD,EAAamC,YAAYH,EAAY,IACrC9B,EAAOkC,YAAc,SAErBC,cAAcrC,GACdE,EAAOkC,YAAc,SAMzB,SAASE,IACPlB,EAAMG,IAhBRrB,EAAOqC,iBAAiB,QAASL,GAajC7B,EAAUkC,iBAAiB,QAASD","file":"src.abd9d5ef.js","sourceRoot":"../src","sourcesContent":["/* \nAny live cell with fewer than two live neighbours dies, as if caused by underpopulation.\nAny live cell with more than three live neighbours dies, as if by overcrowding.\nAny live cell with two or three live neighbours lives on to the next generation.\nAny dead cell with exactly three live neighbours becomes a live cell.\n */\nlet start = 0;\nlet continious;\nconst button = document.querySelector('.btn');\nconst buttonRst = document.querySelector('.btn-reset');\nconst width =\n  document.querySelector('.canvas').clientWidth -\n  (document.querySelector('.canvas').clientWidth % 2);\nconst height =\n  document.querySelector('.canvas').clientHeight -\n  (document.querySelector('.canvas').clientHeight % 2);\nconst canvas = document.querySelector('.canvas').getContext('2d');\nconst size = Math.round((width * height) / ((width * height) / 8));\nconst cols = Math.round(width / size);\nconst rows = Math.round(height / size);\n\ndocument.querySelector('.canvas').setAttribute('width', `${width}`);\ndocument.querySelector('.canvas').setAttribute('height', `${height}`);\n\nfunction countNeighbours(i, j, arr) {\n  /*\n    let upL = arr[i - 1][j - 1][2];\n    let up = arr[i - 1][j][2];\n    let upR = arr[i - 1][j + 1][2];\n    let L = arr[i][j - 1][2];\n    let central = arr[i][j][2];\n    let R = arr[i][j + 1][2];\n    let downL = arr[i + 1][j - 1][2];\n    let down = arr[i + 1][j][2];\n    let downR = arr[i + 1][j + 1][2];\n    */\n  let neighbours = 0;\n  if (j === 0 && i === 0) {\n    neighbours += arr[i][j + 1][2] + arr[i + 1][j][2] + arr[i + 1][j + 1][2];\n    return neighbours;\n  }\n  if (j === rows - 1 && i === 0) {\n    neighbours += arr[i + 1][j][2] + arr[i][j - 1][2] + arr[i + 1][j - 1][2];\n    return neighbours;\n  }\n  if (j === 0 && i === cols - 1) {\n    neighbours += arr[i][j + 1][2] + arr[i - 1][j][2] + arr[i - 1][j + 1][2];\n    return neighbours;\n  }\n  if (j === rows - 1 && i === cols - 1) {\n    neighbours += arr[i][j - 1][2] + arr[i - 1][j][2] + arr[i - 1][j - 1][2];\n    return neighbours;\n  }\n\n  if (i === 0 && j !== 0 && j !== rows - 1) {\n    neighbours +=\n      arr[i][j - 1][2] +\n      arr[i][j + 1][2] +\n      arr[i + 1][j - 1][2] +\n      arr[i + 1][j][2] +\n      arr[i + 1][j + 1][2];\n    return neighbours;\n  }\n  if (j === 0 && i !== 0 && i !== cols - 1) {\n    neighbours +=\n      arr[i - 1][j][2] +\n      arr[i - 1][j + 1][2] +\n      arr[i][j + 1][2] +\n      arr[i + 1][j][2] +\n      arr[i + 1][j + 1][2];\n    return neighbours;\n  }\n  if (i === cols - 1 && j !== 0 && j !== rows - 1) {\n    neighbours +=\n      arr[i - 1][j - 1][2] +\n      arr[i - 1][j][2] +\n      arr[i - 1][j + 1][2] +\n      arr[i][j - 1][2] +\n      arr[i][j + 1][2];\n    return neighbours;\n  }\n  if (j === rows - 1 && i !== 0 && i !== cols - 1) {\n    neighbours +=\n      arr[i - 1][j - 1][2] +\n      arr[i - 1][j][2] +\n      arr[i][j - 1][2] +\n      arr[i + 1][j - 1][2] +\n      arr[i + 1][j][2];\n    return neighbours;\n  } else {\n    neighbours +=\n      arr[i - 1][j - 1][2] +\n      arr[i - 1][j][2] +\n      arr[i - 1][j + 1][2] +\n      arr[i][j - 1][2] +\n      arr[i][j + 1][2] +\n      arr[i + 1][j - 1][2] +\n      arr[i + 1][j][2] +\n      arr[i + 1][j + 1][2];\n    return neighbours;\n  }\n}\n\nconst make2Darray = function () {\n  const arr = new Array(cols);\n  for (let i = 0; i < cols; i += 1) {\n    arr[i] = new Array(rows);\n  }\n  for (let i = 0; i < cols; i += 1) {\n    for (let j = 0; j < rows; j += 1) {\n      let z;\n      if (j % 2 === 0) {\n        z = Math.round(Math.random() / 1.95);\n      } else {\n        z = Math.round(Math.random() / 1.9);\n      }\n      arr[i][j] = [i, j, z];\n    }\n  }\n  for (let i = 0; i < cols; i += 1) {\n    for (let j = 0; j < rows; j += 1) {\n      arr[i][j].push(countNeighbours(i, j, arr));\n      if (arr[i][j][2] === 1) {\n        canvas.fillStyle = `rgb(\n            0,\n            0,\n            ${Math.floor(Math.random() * 255)})`;\n        canvas.fillRect(i * size, j * size, size, size);\n      }\n      if (arr[i][j][2] === 0) {\n        canvas.clearRect(i * size, j * size, size, size);\n      }\n    }\n  }\n  return arr;\n};\n\nlet arr = make2Darray();\n\nfunction gameOflife() {\n  const arrCopy = [...arr];\n  for (let i = 0; i < cols; i += 1) {\n    for (let j = 0; j < rows; j += 1) {\n      let neighbours = countNeighbours(i, j, arrCopy);\n      if (neighbours < 2) {\n        arr[i][j][2] = 0;\n      } else if (neighbours > 3) {\n        arr[i][j][2] = 0;\n      } else if ((arr[i][j][2] === 1 && neighbours === 2) || neighbours === 3) {\n        arr[i][j][2] = 1;\n      } else if (arr[i][j][2] === 0 && neighbours === 3) {\n        arr[i][j][2] = 1;\n      }\n\n      if (arr[i][j][2] === 1) {\n        canvas.fillStyle = `rgb(\n            0,\n            0,\n            ${Math.floor(Math.random() * 255)})`;\n        canvas.fillRect(i * size, j * size, size, size);\n      }\n      if (arr[i][j][2] === 0) {\n        canvas.clearRect(i * size, j * size, size, size);\n      }\n    }\n  }\n}\n\nbutton.addEventListener('click', onBtnClick);\n\nfunction onBtnClick() {\n  start = start === 0 ? 1 : 0;\n  if (start) {\n    continious = setInterval(gameOflife, 75);\n    button.textContent = 'Stop';\n  } else {\n    clearInterval(continious);\n    button.textContent = 'Start';\n  }\n}\n\nbuttonRst.addEventListener('click', onRstBtnClick);\n\nfunction onRstBtnClick() {\n  arr = make2Darray();\n}\n"]}