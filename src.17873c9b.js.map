{"version":3,"sources":["index.js"],"names":["continious","curX","curY","start","button","document","querySelector","buttonRst","canvas","canvas2D","getContext","size","width","clientWidth","height","clientHeight","cols","rows","make2Darray","arr","Array","i","j","fillStyle","Math","floor","random","fillRect","clearRect","setAttribute","onmousemove","e","offsetX","offsetY","onmousedown","console","log","countNeighbors","array","count","gameOflife","arrCopy","JSON","parse","stringify","neighbors","onBtnClick","setInterval","textContent","clearInterval","onRstBtnClick","addEventListener"],"mappings":"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","file":"src.17873c9b.js","sourceRoot":"../src","sourcesContent":["/* \nAny live cell with fewer than two live neighbors dies, as if caused by underpopulation.\nAny live cell with more than three live neighbors dies, as if by overcrowding.\nAny live cell with two or three live neighbors lives on to the next generation.\nAny dead cell with exactly three live neighbors becomes a live cell.\n */\n\nlet continious,\n  curX,\n  curY,\n  start = 0;\nconst button = document.querySelector('.btn');\nconst buttonRst = document.querySelector('.btn-reset');\nlet canvas = document.querySelector('.canvas');\nlet canvas2D = document.querySelector('.canvas').getContext('2d');\nconst size = 12;\nconst width = canvas.clientWidth - (canvas.clientWidth % size);\nconst height = canvas.clientHeight - (canvas.clientHeight % size);\nconst cols = width / size;\nconst rows = height / size;\ncanvas.setAttribute('style', `width:${width}px; height:${height}px`);\ncanvas.setAttribute('width', `${width}`);\ncanvas.setAttribute('height', `${height}`);\n\ncanvas.onmousemove = function (e) {\n  curX = Math.floor(e.offsetX / size);\n  curY = Math.floor(e.offsetY / size);\n};\n\ncanvas.onmousedown = function () {\n  arr[curX][curY][2] = arr[curX][curY][2] === 0 ? 1 : 0;\n  canvas2D.fillStyle = `rgb(\n          0,\n          0,\n          ${Math.floor(Math.random() * 255)})`;\n  if (arr[curX][curY][2] === 1) {\n    canvas2D.fillRect(curX * size, curY * size, size, size);\n  }\n  if (arr[curX][curY][2] === 0) {\n    canvas2D.clearRect(curX * size, curY * size, size, size);\n  }\n  console.log(arr);\n};\n\nfunction make2Darray() {\n  const arr = new Array(cols);\n  for (let i = 0; i < cols; i += 1) {\n    arr[i] = new Array(rows);\n  }\n  // RANDOMIZER\n  //\n  // for (let i = 0; i < cols; i += 1) {\n  //   for (let j = 0; j < rows; j += 1) {\n  //     let z = 0;\n  //     if (j % 2 === 0) {\n  //       z = Math.round(Math.random() / 1.75);\n  //     } else {\n  //       z = Math.round(Math.random() / 1.9);\n  //     }\n  //     arr[i][j] = [i, j, z];\n  //   }\n  // }\n  for (let i = 0; i < cols; i += 1) {\n    for (let j = 0; j < rows; j += 1) {\n      arr[i][j] = [i, j, 0];\n      canvas2D.fillStyle = `rgb(\n          0,\n          0,\n          ${Math.floor(Math.random() * 255)})`;\n      if (arr[i][j][2] === 1) {\n        canvas2D.fillRect(i * size, j * size, size, size);\n      }\n      if (arr[i][j][2] === 0) {\n        canvas2D.clearRect(i * size, j * size, size, size);\n      }\n    }\n  }\n  return arr;\n}\n\nlet arr = make2Darray();\n\nfunction countNeighbors(i, j, array) {\n  let count = 0;\n  if (j - 1 >= 0) {\n    if (array[i][j - 1][2] === 1) count += 1;\n  }\n  if (j - 1 >= 0 && i - 1 >= 0) {\n    if (array[i - 1][j - 1][2] === 1) count += 1;\n  }\n  if (j - 1 >= 0 && i + 1 < cols) {\n    if (array[i + 1][j - 1][2] === 1) count += 1;\n  }\n  if (i - 1 >= 0) {\n    if (array[i - 1][j][2] === 1) count += 1;\n  }\n  if (i + 1 < cols) {\n    if (array[i + 1][j][2] === 1) count += 1;\n  }\n  if (j + 1 < rows) {\n    if (array[i][j + 1][2] === 1) count += 1;\n  }\n  if (j + 1 < rows && i - 1 >= 0) {\n    if (array[i - 1][j + 1][2] === 1) count += 1;\n  }\n  if (j + 1 < rows && i + 1 < cols) {\n    if (array[i + 1][j + 1][2] === 1) count += 1;\n  }\n  return count;\n}\n\nfunction gameOflife() {\n  let arrCopy = JSON.parse(JSON.stringify(arr));\n  console.log(arrCopy, arr);\n  for (let i = 0; i < cols; i += 1) {\n    for (let j = 0; j < rows; j += 1) {\n      let neighbors = countNeighbors(i, j, arrCopy);\n      if (neighbors < 2) {\n        arr[i][j][2] = 0;\n      } else if (neighbors > 3) {\n        arr[i][j][2] = 0;\n      } else if (\n        (arrCopy[i][j][2] === 1 && neighbors === 2) ||\n        (arrCopy[i][j][2] === 1 && neighbors === 3)\n      ) {\n        arr[i][j][2] = 1;\n      } else if (arrCopy[i][j][2] === 0 && neighbors === 3) {\n        arr[i][j][2] = 1;\n      }\n      if (arr[i][j][2] === 1) {\n        canvas2D.fillStyle = `rgb(\n            0,\n            0,\n            ${Math.floor(Math.random() * 255)})`;\n        canvas2D.fillRect(i * size, j * size, size, size);\n      }\n      if (arr[i][j][2] === 0) {\n        canvas2D.clearRect(i * size, j * size, size, size);\n      }\n    }\n  }\n}\n\nbutton.addEventListener('click', onBtnClick);\nbuttonRst.addEventListener('click', onRstBtnClick);\n\nfunction onBtnClick() {\n  start = start === 0 ? 1 : 0;\n  if (start) {\n    continious = setInterval(gameOflife, 75);\n    button.textContent = 'Stop';\n  } else {\n    clearInterval(continious);\n    button.textContent = 'Start';\n  }\n}\n\nfunction onRstBtnClick() {\n  arr = make2Darray();\n}\n"]}