{"version":3,"sources":["index.js"],"names":["continious","curX","curY","start","button","document","querySelector","buttonRst","canvas","canvas2D","getContext","size","width","clientWidth","height","clientHeight","cols","rows","countNeighbours","i","j","arr","neighbours","make2Darray","Array","z","push","fillStyle","Math","floor","random","fillRect","clearRect","setAttribute","onmousemove","e","offsetX","offsetY","onmousedown","console","log","gameOflife","arrCopy","onBtnClick","setInterval","textContent","clearInterval","onRstBtnClick","addEventListener"],"mappings":"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","file":"src.357e1c31.js","sourceRoot":"../src","sourcesContent":["/* \nAny live cell with fewer than two live neighbours dies, as if caused by underpopulation.\nAny live cell with more than three live neighbours dies, as if by overcrowding.\nAny live cell with two or three live neighbours lives on to the next generation.\nAny dead cell with exactly three live neighbours becomes a live cell.\n */\n\nlet continious,\n  curX,\n  curY,\n  start = 0;\nconst button = document.querySelector('.btn');\nconst buttonRst = document.querySelector('.btn-reset');\nlet canvas = document.querySelector('.canvas');\nlet canvas2D = document.querySelector('.canvas').getContext('2d');\nconst size = 8;\nconst width = canvas.clientWidth - (canvas.clientWidth % size);\nconst height = canvas.clientHeight - (canvas.clientHeight % size);\nconst cols = width / size;\nconst rows = height / size;\ncanvas.setAttribute('style', `width:${width}px; height:${height}px`);\ncanvas.setAttribute('width', `${width}`);\ncanvas.setAttribute('height', `${height}`);\n\ncanvas.onmousemove = function (e) {\n  curX = Math.floor(e.offsetX / size);\n  curY = Math.floor(e.offsetY / size);\n};\n\ncanvas.onmousedown = function () {\n  arr[curX][curY][2] = arr[curX][curY][2] === 0 ? 1 : 0;\n  canvas2D.fillStyle = `rgb(\n          0,\n          0,\n          ${Math.floor(Math.random() * 255)})`;\n  if (arr[curX][curY][2] === 1) {\n    canvas2D.fillRect(curX * size, curY * size, size, size);\n  }\n  if (arr[curX][curY][2] === 0) {\n    canvas2D.clearRect(curX * size, curY * size, size, size);\n  }\n  console.log(arr[curX][curY][2]);\n};\n\nfunction countNeighbours(i, j, arr) {\n  /*\n    let upL = arr[i - 1][j - 1][2];\n    let up = arr[i - 1][j][2];\n    let upR = arr[i - 1][j + 1][2];\n    let L = arr[i][j - 1][2];\n    let central = arr[i][j][2];\n    let R = arr[i][j + 1][2];\n    let downL = arr[i + 1][j - 1][2];\n    let down = arr[i + 1][j][2];\n    let downR = arr[i + 1][j + 1][2];\n    */\n  let neighbours = 0;\n  if (j === 0 && i === 0) {\n    neighbours += arr[i][j + 1][2] + arr[i + 1][j][2] + arr[i + 1][j + 1][2];\n    return neighbours;\n  }\n  if (j === rows - 1 && i === 0) {\n    neighbours += arr[i + 1][j][2] + arr[i][j - 1][2] + arr[i + 1][j - 1][2];\n    return neighbours;\n  }\n  if (j === 0 && i === cols - 1) {\n    neighbours += arr[i][j + 1][2] + arr[i - 1][j][2] + arr[i - 1][j + 1][2];\n    return neighbours;\n  }\n  if (j === rows - 1 && i === cols - 1) {\n    neighbours += arr[i][j - 1][2] + arr[i - 1][j][2] + arr[i - 1][j - 1][2];\n    return neighbours;\n  }\n\n  if (i === 0 && j !== 0 && j !== rows - 1) {\n    neighbours +=\n      arr[i][j - 1][2] +\n      arr[i][j + 1][2] +\n      arr[i + 1][j - 1][2] +\n      arr[i + 1][j][2] +\n      arr[i + 1][j + 1][2];\n    return neighbours;\n  }\n  if (j === 0 && i !== 0 && i !== cols - 1) {\n    neighbours +=\n      arr[i - 1][j][2] +\n      arr[i - 1][j + 1][2] +\n      arr[i][j + 1][2] +\n      arr[i + 1][j][2] +\n      arr[i + 1][j + 1][2];\n    return neighbours;\n  }\n  if (i === cols - 1 && j !== 0 && j !== rows - 1) {\n    neighbours +=\n      arr[i - 1][j - 1][2] +\n      arr[i - 1][j][2] +\n      arr[i - 1][j + 1][2] +\n      arr[i][j - 1][2] +\n      arr[i][j + 1][2];\n    return neighbours;\n  }\n  if (j === rows - 1 && i !== 0 && i !== cols - 1) {\n    neighbours +=\n      arr[i - 1][j - 1][2] +\n      arr[i - 1][j][2] +\n      arr[i][j - 1][2] +\n      arr[i + 1][j - 1][2] +\n      arr[i + 1][j][2];\n    return neighbours;\n  } else {\n    neighbours +=\n      arr[i - 1][j - 1][2] +\n      arr[i - 1][j][2] +\n      arr[i - 1][j + 1][2] +\n      arr[i][j - 1][2] +\n      arr[i][j + 1][2] +\n      arr[i + 1][j - 1][2] +\n      arr[i + 1][j][2] +\n      arr[i + 1][j + 1][2];\n    return neighbours;\n  }\n}\n\nfunction make2Darray() {\n  const arr = new Array(cols);\n  for (let i = 0; i < cols; i += 1) {\n    arr[i] = new Array(rows);\n  }\n  for (let i = 0; i < cols; i += 1) {\n    for (let j = 0; j < rows; j += 1) {\n      let z = 0;\n      // if (j % 2 === 0) {\n      //   z = Math.round(Math.random() / 1.95);\n      // } else {\n      //   z = Math.round(Math.random() / 1.9);\n      // }\n      arr[i][j] = [i, j, z];\n    }\n  }\n  for (let i = 0; i < cols; i += 1) {\n    for (let j = 0; j < rows; j += 1) {\n      arr[i][j].push(countNeighbours(i, j, arr));\n      canvas2D.fillStyle = `rgb(\n          0,\n          0,\n          ${Math.floor(Math.random() * 255)})`;\n      if (arr[i][j][2] === 1) {\n        canvas2D.fillRect(i * size, j * size, size, size);\n      }\n      if (arr[i][j][2] === 0) {\n        canvas2D.clearRect(i * size, j * size, size, size);\n      }\n    }\n  }\n  return arr;\n}\n\nlet arr = make2Darray();\n\nfunction gameOflife() {\n  const arrCopy = [...arr];\n  for (let i = 0; i < cols; i += 1) {\n    for (let j = 0; j < rows; j += 1) {\n      let neighbours = countNeighbours(i, j, arrCopy);\n      if (neighbours < 2) {\n        arr[i][j][2] = 0;\n      } else if (neighbours > 3) {\n        arr[i][j][2] = 0;\n      } else if (\n        (arr[i][j][2] === 1 && neighbours === 2) ||\n        (arr[i][j][2] === 1 && neighbours === 3)\n      ) {\n        arr[i][j][2] = 1;\n      } else if (arr[i][j][2] === 0 && neighbours === 3) {\n        arr[i][j][2] = 1;\n      }\n\n      if (arr[i][j][2] === 1) {\n        canvas2D.fillStyle = `rgb(\n            0,\n            0,\n            ${Math.floor(Math.random() * 255)})`;\n        canvas2D.fillRect(i * size, j * size, size, size);\n      }\n      if (arr[i][j][2] === 0) {\n        canvas2D.clearRect(i * size, j * size, size, size);\n      }\n    }\n  }\n}\n\nbutton.addEventListener('click', onBtnClick);\nbuttonRst.addEventListener('click', onRstBtnClick);\n\nfunction onBtnClick() {\n  start = start === 0 ? 1 : 0;\n  if (start) {\n    continious = setInterval(gameOflife, 75);\n    button.textContent = 'Stop';\n  } else {\n    clearInterval(continious);\n    button.textContent = 'Start';\n  }\n}\n\nfunction onRstBtnClick() {\n  arr = make2Darray();\n}\n"]}